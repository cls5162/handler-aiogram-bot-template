import random
import time
import json
import os
from config import NAME_BOT
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
def command(command_name: str):
    def decorator(func):
        func.command_name = command_name
        return func
    return decorator

@command("tech")
async def lawsuits_command(message: types.Message):
    args = message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(args) < 2 or not args[1]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        await message.answer("üíô –í–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã: /tech [–°—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è]", parse_mode="HTML")
        return

    tech_ask = args[1]  # –°—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è

    final_message = (
        f"üöÄ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        f"‚úâ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {tech_ask}\n"
        f'üëÄ –í–∞—à ID: {message.from_user.id}'
    )

    await message.answer(final_message, parse_mode="HTML")

def register_commands(dp: Dispatcher):
    handlers = [func for func in globals().values() if hasattr(func, 'command_name')]
    for handler in handlers:
        dp.register_message_handler(handler, commands=[handler.command_name])